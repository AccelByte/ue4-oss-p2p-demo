// Copyright (c) 2021 AccelByte Inc. All Rights Reserved.
// This is licensed software from AccelByte Inc, for limitations
// and restrictions contact your company contract manager.

#pragma once

#include "CoreMinimal.h"
#include "UObject/CoreOnline.h"
#include "OnlineSubsystemTypes.h"
#include "Interfaces/OnlineIdentityInterface.h"
#include "OnlineSubsystemAccelByteTypes.h"

class FOnlineSubsystemAccelByte;

/**
 * Info associated with an user account generated by this online service
 */
class FUserOnlineAccountAccelByte :
	public FUserOnlineAccount
{

public:

	//~ Begin FOnlineUser Interface
	virtual TSharedRef<const FUniqueNetId> GetUserId() const override
	{
		return UserIdPtr;
	}
	virtual FString GetRealName() const override;
	virtual FString GetDisplayName(const FString& Platform = FString()) const override;
	virtual bool GetUserAttribute(const FString& AttrName, FString& OutAttrValue) const override;
	//~ End FOnlineUser Interface
	
	//~ Begin FUserOnlineAccount Interface
	virtual FString GetAccessToken() const override
	{
		//TODO: return the credential accelbyyte token
		return TEXT("Not-Supported");
	}
	virtual bool SetUserAttribute(const FString& AttrName, const FString& AttrValue) override;
	virtual bool GetAuthAttribute(const FString& AttrName, FString& OutAttrValue) const override;
	//~ End FUserOnlineAccount Interface

	FUserOnlineAccountAccelByte(const FString& InUserId = TEXT(""))
		: UserIdPtr(new FUniqueNetIdAccelByte(InUserId))
	{
	}

	virtual ~FUserOnlineAccountAccelByte()
	{
	}

	/** User Id represented as a FUniqueNetId */
	TSharedRef<const FUniqueNetId> UserIdPtr;

	/** Additional key/value pair data related to auth */
	TMap<FString, FString> AdditionalAuthData;
	/** Additional key/value pair data related to user attribution */
	TMap<FString, FString> UserAttributes;
};

/**
 * Null service implementation of the online identity interface
 */
class FOnlineIdentityAccelByte : public IOnlineIdentity
{
public:

	//~ Begin IOnlineIdentity Interface
	virtual bool Login(int32 LocalUserNum, const FOnlineAccountCredentials& AccountCredentials) override;
	virtual bool Logout(int32 LocalUserNum) override;
	virtual bool AutoLogin(int32 LocalUserNum) override;
	virtual TSharedPtr<FUserOnlineAccount> GetUserAccount(const FUniqueNetId& UserId) const override;
	virtual TArray<TSharedPtr<FUserOnlineAccount> > GetAllUserAccounts() const override;
	virtual TSharedPtr<const FUniqueNetId> GetUniquePlayerId(int32 LocalUserNum) const override;
	virtual TSharedPtr<const FUniqueNetId> CreateUniquePlayerId(uint8* Bytes, int32 Size) override;
	virtual TSharedPtr<const FUniqueNetId> CreateUniquePlayerId(const FString& Str) override;
	virtual ELoginStatus::Type GetLoginStatus(int32 LocalUserNum) const override;
	virtual ELoginStatus::Type GetLoginStatus(const FUniqueNetId& UserId) const override;
	virtual FString GetPlayerNickname(int32 LocalUserNum) const override;
	virtual FString GetPlayerNickname(const FUniqueNetId& UserId) const override;
	virtual FString GetAuthToken(int32 LocalUserNum) const override;
	virtual void RevokeAuthToken(const FUniqueNetId& UserId, const FOnRevokeAuthTokenCompleteDelegate& Delegate) override;
	virtual void GetUserPrivilege(const FUniqueNetId& UserId, EUserPrivileges::Type Privilege, const FOnGetUserPrivilegeCompleteDelegate& Delegate) override;
	virtual FPlatformUserId GetPlatformUserIdFromUniqueNetId(const FUniqueNetId& UniqueNetId) const override;
	virtual FString GetAuthType() const override;
	//~ End IOnlineIdentity Interface

	FOnlineIdentityAccelByte(FOnlineSubsystemAccelByte* InSubsystem);
	virtual ~FOnlineIdentityAccelByte();

private:
	
	FOnlineIdentityAccelByte() = delete;
	FOnlineSubsystemAccelByte* AccelByteSubsystem;
	//Only support 1 login per application
	TSharedPtr<const FUniqueNetId> CurrentUser;
	TSharedPtr<FUserOnlineAccountAccelByte> CurrentUserAccount;

	void LoginSuccess(const FString &Id);
	void LoginFailed(int32 ErrorCode, const FString& ErrorMessage);
};

typedef TSharedPtr<FOnlineIdentityAccelByte, ESPMode::ThreadSafe> FOnlineIdentityAccelBytePtr;